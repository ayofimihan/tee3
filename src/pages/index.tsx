import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import { useAuth } from "@clerk/nextjs";
import { RouterOutputs } from "~/utils/api";
import Image from "next/image";
import {
  LoadingScreen
} from "./components/loader";
import { SmallLoadingSpinner } from "./components/loader";

import { useState as UseState } from "react";
import { toast } from "react-hot-toast";

export default function Home() {
  const { getToken, isLoaded, isSignedIn } = useAuth();
  const { data, isLoading } = api.posts.getAll.useQuery();
  if (isLoading) {
    return <LoadingScreen />;
  }
  console.log(data);

  function CreatePostWizard() {
    const [content, setContent] = UseState("");
    const ctx = api.useContext();

    const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
      onSuccess: async () => {
        setContent("");
        await ctx.posts.getAll.invalidate();
        toast.success("post succesfully sent!");
      },
      onError: (err) => {
        //error message from zod
        const errorMessage = err.data?.zodError?.fieldErrors?.content?.[0];
        if (errorMessage) {
          toast.error(errorMessage);
        }
        //handling error message from server
        const errorMessageFromServer = err.data?.code;
        console.log(errorMessageFromServer);
        if (errorMessageFromServer === "TOO_MANY_REQUESTS") {
          toast.error("Touch Grass Omope");
        }
      },
    });
    const { user } = useUser();
    console.log(user?.id);
    if (!user) {
      return;
    }
    return (
      <div className="flex pl-4 ">
        {" "}
        <Image
          src={user.profileImageUrl}
          alt="profileimage"
          width={100}
          height={100}
          className="h-14 w-14 rounded-full p-2"
        />{" "}
        <input
          type="text"
          placeholder="kilon poppin"
          className="  bg-transparen w-full outline-none"
          onChange={(e) => setContent(e.target.value)}
          value={content}
          disabled={isPosting}
        />
        {content !== "" && (
          <button onClick={() => mutate({ content })} disabled={isPosting}>
            {isPosting ? <SmallLoadingSpinner /> : "Post"}
          </button>
        )}
      </div>
    );
  }

  type PostWithUser = RouterOutputs["posts"]["getAll"][number];
  const PostView = (props: PostWithUser) => {
    const { post, author } = props;

    function timeOfPost() {
      const time = post.title;
      console.log(time);
      const formattedTime = new Date(time).toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric",
        hour: "numeric",
        minute: "numeric",
      });
      console.log(formattedTime);
      const currentTime = new Date().toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric",
        hour: "numeric",
        minute: "numeric",
      });
      console.log(currentTime);
      const timeDifference =
        new Date(currentTime).getTime() - new Date(formattedTime).getTime();
      console.log(timeDifference);
      const timeDifferenceInMinutes = timeDifference / 60000;
      console.log(timeDifferenceInMinutes);
      const timeDifferenceInHours = timeDifferenceInMinutes / 60;
      console.log(timeDifferenceInHours);
      const roundedTime = Math.round(timeDifferenceInHours);
      if (timeDifferenceInHours < 1) {
        return `${Math.round(timeDifferenceInMinutes)}m`;
      }
      return `${roundedTime}h`;
    }
    return (
      <div key={post.id} className="flex border border-green-400 p-3 ">
        <div className="h-14 w-14">
          {" "}
          <Image
            src={author.profileImageUrl}
            alt="profileimage"
            width={200}
            height={200}
            className=" rounded-full p-2"
          />{" "}
        </div>

        <div className="flex flex-col">
          <div className="flex gap-2 text-xs">
            <div className="text-xs text-pink-100">{`@${
              author.username ?? author.name
            }`}</div>{" "}
            Â·<div className="font-thin"> {timeOfPost()} </div>
          </div>
          <div className="flex items-center p-2">{post.content}</div>
        </div>
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className=" w-full  md:max-w-2xl">
          <CreatePostWizard />
          <div className="border border-green-400 p-4">
            {isLoaded && isSignedIn && <SignOutButton />}
            {!isSignedIn && <SignInButton />}
          </div>
          {isSignedIn && (
            <div className="flex flex-col">
              {data?.map((fullPost) => (
                <PostView {...fullPost} key={fullPost?.post.id} />
              ))}
            </div>
          )}
        </div>
      </main>
    </>
  );
}
